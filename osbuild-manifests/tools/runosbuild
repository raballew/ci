#!/bin/bash

# This is a helper for the makefile rule to build a particular image
# from the preprocessed json manifest. It is a shellscript rather
# than just some make lines because some of the complexities just
# are painful to do in make.
#
# Features:
#
# * Knows what target to export based on the extensions.
# * Knows what the exported filename based on the extensions.
# * Supports building natively or in a VM via osbuildvm.
# * Runs only the minimal required commands as root, and
#   chowns the resulting files to the user
# * Supports exporting an extra ostree commit and pulling that
#   into an existing repo.

set -e

DEST="$1"
JSON="$2"
TARGET="$3"
IMAGETYPE="$4"
ARCH="$5"
COMBINEDEXTENSION="$6"

# Map extension => export pipeline name
declare -A EXPORT_BY_EXT
EXPORT_BY_EXT[img]=image
EXPORT_BY_EXT[oci.tar]=container
EXPORT_BY_EXT[qcow2]=qcow2
EXPORT_BY_EXT[repo]=ostree-commit
EXPORT_BY_EXT[oci-archive]=ostree-oci-image
EXPORT_BY_EXT[rootfs]=rootfs
EXPORT_BY_EXT[ext4]=ext4
EXPORT_BY_EXT[tar]=tar
EXPORT_BY_EXT[aboot]=aboot

# Map extension to name of exported file by pipeline
declare -A EXPORT_FILE_BY_EXT
EXPORT_FILE_BY_EXT[img]=disk.img
EXPORT_FILE_BY_EXT[qcow2]=disk.qcow2
EXPORT_FILE_BY_EXT[oci.tar]=container.tar
EXPORT_FILE_BY_EXT[repo]=repo
EXPORT_FILE_BY_EXT[oci-archive]=image.oci-archive
EXPORT_FILE_BY_EXT[rootfs]=
EXPORT_FILE_BY_EXT[ext4]=rootfs.ext4
EXPORT_FILE_BY_EXT[tar]=rootfs.tar
EXPORT_FILE_BY_EXT[aboot]=images

HOST_ARCH=$(arch)
CURRENT_UIDGID="$(id -u):$(id -g)"
SUDO=

if [ $ARCH == $HOST_ARCH -a $VM == 0 ]; then
    if [ $CURRENT_UIDGID != "0:0" ]; then
        SUDO="sudo"
        OSBUILD="sudo osbuild"
    else
        OSBUILD="osbuild"
    fi
else
    OSBUILD="osbuildvm/osbuildvm --arch=$ARCH"
fi

CHECKPOINT_ARGS=
for CP in $CHECKPOINTS; do
    CHECKPOINT_ARGS="${CHECKPOINT_ARGS} --checkpoint ${CP}"
done

EXTENSIONS=()
declare -A EXPORTS

# Split EXTENSION over + into EXTS
OIFS=$IFS
IFS='+'
for EXT in $COMBINEDEXTENSION
do
    EXTENSIONS+=($EXT)
    EXPORTS[${EXPORT_BY_EXT[${EXT}]}]=1
done
IFS=$OIFS

# If OSTREE_REPO is set, and we're building an image that has an
# ostree commit, then we also export that commit to the repo specified
# by OSTREE_REPO.
ALSO_EXPORT_OSTREE=0
if [ "$OSTREE_REPO" != "" -a "$IMAGETYPE" == "ostree" ]; then
    ALSO_EXPORT_OSTREE=1

    EXPORTS[ostree-commit]=1

    # Ensure we have a repo to export to
    ostree init --repo=$OSTREE_REPO --mode archive
fi

EXPORT_ARGS=--cache-max-size=$CACHESIZE
for EXPORT in ${!EXPORTS[@]}; do
    EXPORT_ARGS="$EXPORT_ARGS --export $EXPORT"

    # Recreate export dirs to own by user, not root (from sudo)
    $SUDO rm -rf $OUTPUTDIR/$EXPORT
    mkdir -p $OUTPUTDIR/$EXPORT
done

echo $OSBUILD $CHECKPOINT_ARGS --store $STOREDIR --output-directory $OUTPUTDIR $EXPORT_ARGS $OSBUILD_ARGS $JSON
$OSBUILD $CHECKPOINT_ARGS --store $STOREDIR --output-directory $OUTPUTDIR $EXPORT_ARGS $OSBUILD_ARGS $JSON

if [ $ALSO_EXPORT_OSTREE == "1" ]; then
    ostree pull-local --repo=$OSTREE_REPO $OUTPUTDIR/ostree-commit/repo
fi

# Extract and chown exported files
for EXT in ${EXTENSIONS[@]}; do
    EXPORTDIR=${EXPORT_BY_EXT[${EXT}]}
    EXPORTFILE=${EXPORT_FILE_BY_EXT[${EXT}]}
    DESTFILE=$(basename $DEST $COMBINEDEXTENSION)$EXT
    echo Extracting $EXPORTDIR/$EXPORTFILE as $DESTFILE

    CHOWNARGS=
    if [ $EXT == repo -o $EXT == aboot ]; then
        CHOWNARGS=-R # Chown entire repo dir as it doesn't care about permissions
    fi

    $SUDO chown $CHOWNARGS $CURRENT_UIDGID $OUTPUTDIR/$EXPORTDIR/$EXPORTFILE
    $SUDO mv $OUTPUTDIR/$EXPORTDIR/$EXPORTFILE $DESTFILE
done

# Remove un-extracted parts of exports
for EXPORTDIR in ${!EXPORTS[@]}; do
    $SUDO rm -rf $OUTPUTDIR/$EXPORTDIR
done
