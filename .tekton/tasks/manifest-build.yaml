---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Image Build
    tekton.dev/displayName: Manifest
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
    tekton.dev/tags: image-build
  labels:
    app.kubernetes.io/version: "0.7"
  name: manifest-build
spec:
  description: |
    Buildah task to create and push manifest lists and image indexes based on a set of image sources.
  params:
    - default: quay.io/buildah/stable:v1
      description: The location of the buildah builder image.
      name: builder_image
    - default: overlay
      description: Set buildah storage driver
      name: storage_driver
    - default: "true"
      description:
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: tls_verify
  steps:
    - env:
        - name: PARAM_STORAGE_DRIVER
          value: $(params.storage_driver)
        - name: PARAM_TLS_VERIFY
          value: $(params.tls_verify)
        - name: WORKSPACE_ARTIFACTS_PATH
          value: $(workspaces.artifacts.path)
        - name: WORKSPACE_SSL_CERT_DIR_BOUND
          value: $(workspaces.ssl-cert-dir.bound)
        - name: WORKSPACE_SSL_CERT_DIR_PATH
          value: $(workspaces.ssl-cert-dir.path)
        - name: WORKSPACE_REGISTRY_CONFIG_PATH
          value: $(workspaces.registry-config.path)
      image: $(params.builder_image)
      name: build
      script: |
        #!/usr/bin/env sh
        set -eu

        CERT_DIR_FLAG=""
        [ ${WORKSPACE_SSL_CERT_DIR_BOUND} = "true" ] && CERT_DIR_FLAG="--cert-dir=${WORKSPACE_SSL_CERT_DIR_PATH}"

        export REGISTRY_AUTH_FILE=${WORKSPACE_REGISTRY_CONFIG_PATH}/auth.json

        suffix=".spec"
        for path in ${WORKSPACE_ARTIFACTS_PATH}/containers/*${suffix}
        do
          spec=$(basename ${path})
          archive=${spec%"${suffix}"}
          manifest=$(cat $path)

          set +e
          buildah ${CERT_DIR_FLAG} --storage-driver=${PARAM_STORAGE_DRIVER} manifest exists ${manifest}
          ret=$?
          set -e
          if [ "${ret}" -ne "0" ]; then
            buildah ${CERT_DIR_FLAG} --storage-driver=${PARAM_STORAGE_DRIVER} manifest create ${manifest}
            echo ${manifest} >> ./manifests
          fi

          buildah ${CERT_DIR_FLAG} --storage-driver=${PARAM_STORAGE_DRIVER} manifest add ${manifest} oci-archive:${WORKSPACE_ARTIFACTS_PATH}/containers/${archive}
        done

        input="./manifests"
        while IFS= read -r line
        do
          buildah ${CERT_DIR_FLAG} --storage-driver=${PARAM_STORAGE_DRIVER} manifest push --all ${line} docker://${line}
        done < "$input"
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.artifacts.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - description: The built container images can be stored seperately on this workspace.
      name: artifacts
    - description: |
        A workspace containing CA certificates, this will be used by
        Buildah to verify the peer with when pulling or pushing over HTTPS.
      name: ssl-cert-dir
      optional: true
    - description: |
        An optional workspace that allows providing a auth.json
        file for Buildah to access the container registry. The file should be
        placed at the root of the workspace with name auth.json.
      name: registry-config
